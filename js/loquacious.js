// Generated by CoffeeScript 1.8.0
(function() {
  var Loquacious, esprima, fs, log, main, syntax, verboseMode;

  fs = require('fs');

  esprima = require('esprima');

  Loquacious = (function() {
    function Loquacious(inputFilename) {
      this.inputFilename = inputFilename;
    }

    Loquacious.prototype.findExprs = function(ast, lineNo) {
      var expr, exprs, _i, _len, _ref;
      exprs = [];
      _ref = ast.body;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        expr = _ref[_i];
        if (expr.loc.start.line === lineNo) {
          exprs.push(expr);
        }
        if (expr.type === 'FunctionDeclaration') {
          exprs = exprs.concat(this.findExprs(expr.body, lineNo));
        }
      }
      return exprs;
    };

    Loquacious.prototype.explainExpr = function(expr) {
      return "lel " + expr.type;
    };

    Loquacious.prototype.getIndent = function(line) {
      var matches;
      matches = line.match(/^(\s*)/);
      if (matches) {
        return matches[1];
      }
      return "";
    };

    Loquacious.prototype.parse = function() {
      var ast, expr, exprs, indent, line, lineNo, outputLine, _i, _j, _len, _len1, _ref;
      this.inputJS = String(fs.readFileSync(this.inputFilename));
      this.inputLines = this.inputJS.split(/\r\n|\n|\r/);
      ast = esprima.parse(this.inputJS, {
        loc: true
      });
      if ((ast === null) || (ast.body.length < 1)) {
        return false;
      }
      this.output = "";
      lineNo = 0;
      _ref = this.inputLines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        lineNo++;
        exprs = this.findExprs(ast, lineNo);
        indent = this.getIndent(line);
        outputLine = "";
        for (_j = 0, _len1 = exprs.length; _j < _len1; _j++) {
          expr = exprs[_j];
          outputLine += indent + "// ";
          outputLine += this.explainExpr(expr) + "\n";
        }
        outputLine += line + "\n";
        this.output += outputLine;
      }
      return true;
    };

    return Loquacious;

  })();

  syntax = function() {
    console.error("Syntax: loquacious [-v] inputFilename.js outputFilename.js\n");
    console.error("        -h,--help         This help output");
    console.error("        -v,--verbose      Verbose output");
    return process.exit(1);
  };

  verboseMode = false;

  log = {
    verbose: function(text) {
      if (verboseMode) {
        return console.log(text);
      }
    },
    error: function(text) {
      return console.error("ERROR: " + text);
    }
  };

  main = function() {
    var args, inputFilename, loq, outputFilename, which;
    args = require('minimist')(process.argv.slice(2), {
      boolean: ['h', 'v'],
      alias: {
        help: 'h',
        verbose: 'v'
      }
    });
    if (args.help || args._.length < 2 || args._.length > 3) {
      syntax();
    }
    which = null;
    inputFilename = args._[0];
    outputFilename = args._[1];
    verboseMode = args.v;
    loq = new Loquacious(inputFilename);
    loq.parse();
    return console.log(loq.output);
  };

  module.exports = {
    main: main
  };

}).call(this);
